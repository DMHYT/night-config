--- core/src/main/java/com/electronwill/nightconfig/core/io/ConfigWriter.java
+++ android/core_android/src/main/java/com/electronwill/nightconfig/core/io/ConfigWriter.java
@@ -5,15 +5,8 @@
 import java.io.*;
 import java.net.URL;
 import java.net.URLConnection;
-import java.nio.channels.FileChannel;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
-import java.util.EnumSet;
-
-import static java.nio.file.StandardOpenOption.*;
 
 /**
  * Interface for writing configurations.
@@ -63,10 +56,10 @@
 	 * <pre>write(config, file, false)</pre>
 	 *
 	 * @param config  the config to write
-	 * @param file the nio Path to write it to
+	 * @param file the file to write it to
 	 * @throws WritingException if an error occurs
 	 */
-	public default void write(UnmodifiableConfig config, Path file, WritingMode writingMode) {
+	public default void write(UnmodifiableConfig config, File file, WritingMode writingMode) {
 		write(config, file, writingMode, StandardCharsets.UTF_8);
 	}
 
@@ -74,17 +67,13 @@
 	 * Writes a configuration.
 	 *
 	 * @param config  the config to write
-	 * @param file the nio Path to write it to
+	 * @param file the file to write it to
 	 * @throws WritingException if an error occurs
 	 */
-	public default void write(UnmodifiableConfig config, Path file, WritingMode writingMode, Charset charset) {
-		StandardOpenOption[] options;
-		if (writingMode == WritingMode.APPEND) {
-			options = new StandardOpenOption[] { WRITE, CREATE, APPEND };
-		} else {
-			options = new StandardOpenOption[] { WRITE, CREATE, TRUNCATE_EXISTING };
-		}
-		try (OutputStream output = Files.newOutputStream(file, options)) {
+	public default void write(UnmodifiableConfig config, File file, WritingMode writingMode, Charset charset) {
+		boolean append = (writingMode == WritingMode.APPEND);
+		boolean create = true;
+		try (OutputStream output = Files.newOutputStream(file, create, append)) {
 			write(config, output, charset);
 		} catch (IOException e) {
 			throw new WritingException("An I/O error occured", e);
@@ -92,29 +81,6 @@
 	}
 
 	/**
-	 * Writes a configuration. The content of the file is overwritten. This method is equivalent to
-	 * <pre>write(config, file, false)</pre>
-	 *
-	 * @param config the config to write
-	 * @param file   the file to write it to
-	 * @throws WritingException if an error occurs
-	 */
-	public default void write(UnmodifiableConfig config, File file, WritingMode writingMode) {
-		write(config, file, writingMode, StandardCharsets.UTF_8);
-	}
-
-	/**
-	 * Writes a configuration.
-	 *
-	 * @param config the config to write
-	 * @param file   the file to write it to
-	 * @throws WritingException if an error occurs
-	 */
-	public default void write(UnmodifiableConfig config, File file, WritingMode writingMode, Charset charset) {
-		write(config, file.toPath(), writingMode, charset);
-	}
-
-	/**
 	 * Writes a configuration.
 	 *
 	 * @param config the config to write
