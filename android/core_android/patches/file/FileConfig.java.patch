--- core/src/main/java/com/electronwill/nightconfig/core/file/FileConfig.java
+++ android/core_android/src/main/java/com/electronwill/nightconfig/core/file/FileConfig.java
@@ -2,10 +2,9 @@
 
 import com.electronwill.nightconfig.core.Config;
 import com.electronwill.nightconfig.core.ConfigFormat;
+import com.electronwill.nightconfig.core.io.Paths;
 
 import java.io.File;
-import java.nio.file.Path;
-import java.nio.file.Paths;
 
 /**
  * @author TheElectronWill
@@ -16,10 +15,7 @@
 	 */
 	public File getFile();
 
-	/**
-	 * @return the config's file, as a NIO Path object
-	 */
-	public Path getNioPath();
+	// public Path getNioPath(); PATH IS NOT AVAILABLE IN ANDROID < 8
 
 	/**
 	 * Saves this config as soon as possible. This method may return quickly and perform the IO
@@ -57,32 +53,9 @@
 	 * @throws NoFormatFoundException if the format detection fails
 	 */
 	public static FileConfig of(File file) {
-		return of(file.toPath());
-	}
-
-	/**
-	 * Creates a new FileConfig based on the specified file and format.
-	 *
-	 * @param file   the file to use to save and load the config
-	 * @param format the config's format
-	 * @return a new FileConfig associated to the specified file
-	 */
-	public static FileConfig of(File file, ConfigFormat<? extends Config> format) {
-		return of(file.toPath(), format);
-	}
-
-	/**
-	 * Creates a new FileConfig based on the specified file. The format is detected automatically.
-	 *
-	 * @param file the file to use to save and load the config
-	 * @return a new FileConfig associated to the specified file
-	 *
-	 * @throws NoFormatFoundException if the format detection fails
-	 */
-	public static FileConfig of(Path file) {
 		ConfigFormat<?> format = FormatDetector.detect(file);
 		if (format == null) {
-			throw new NoFormatFoundException("No suitable format for " + file.getFileName());
+			throw new NoFormatFoundException("No suitable format for " + file.getName());
 		}
 		return of(file, format);
 	}
@@ -94,7 +67,7 @@
 	 * @param format the config's format
 	 * @return a new FileConfig associated to the specified file
 	 */
-	public static FileConfig of(Path file, ConfigFormat<? extends Config> format) {
+	public static FileConfig of(File file, ConfigFormat<? extends Config> format) {
 		return builder(file, format).build();
 	}
 
@@ -131,30 +104,6 @@
 	 * @throws NoFormatFoundException if the format detection fails
 	 */
 	public static FileConfig ofConcurrent(File file) {
-		return ofConcurrent(file.toPath());
-	}
-
-	/**
-	 * Creates a new thread-safe FileConfig based on the specified file and format.
-	 *
-	 * @param file   the file to use to save and load the config
-	 * @param format the config's format
-	 * @return a new thread-safe FileConfig associated to the specified file
-	 */
-	public static FileConfig ofConcurrent(File file, ConfigFormat<?> format) {
-		return ofConcurrent(file.toPath(), format);
-	}
-
-	/**
-	 * Creates a new thread-safe FileConfig based on the specified file. The format is detected
-	 * automatically.
-	 *
-	 * @param file the file to use to save and load the config
-	 * @return a new thread-safe FileConfig associated to the specified file
-	 *
-	 * @throws NoFormatFoundException if the format detection fails
-	 */
-	public static FileConfig ofConcurrent(Path file) {
 		return builder(file).concurrent().build();
 	}
 
@@ -165,7 +114,7 @@
 	 * @param format the config's format
 	 * @return a new thread-safe FileConfig associated to the specified file
 	 */
-	public static FileConfig ofConcurrent(Path file, ConfigFormat<?> format) {
+	public static FileConfig ofConcurrent(File file, ConfigFormat<?> format) {
 		return builder(file, format).concurrent().build();
 	}
 
@@ -203,33 +152,9 @@
 	 * @throws NoFormatFoundException if the format detection fails
 	 */
 	public static FileConfigBuilder builder(File file) {
-		return builder(file.toPath());
-	}
-
-	/**
-	 * Returns a FileConfigBuilder to create a FileConfig with many options.
-	 *
-	 * @param file   the file to use to save and load the config
-	 * @param format the config's format
-	 * @return a new FileConfigBuilder that will build a FileConfig associated to the specified file
-	 */
-	public static FileConfigBuilder builder(File file, ConfigFormat<?> format) {
-		return builder(file.toPath(), format);
-	}
-
-	/**
-	 * Returns a FileConfigBuilder to create a FileConfig with many options. The format is detected
-	 * automatically.
-	 *
-	 * @param file the file to use to save and load the config
-	 * @return a new FileConfigBuilder that will build a FileConfig associated to the specified file
-	 *
-	 * @throws NoFormatFoundException if the format detection fails
-	 */
-	public static FileConfigBuilder builder(Path file) {
 		ConfigFormat<?> format = FormatDetector.detect(file);
 		if (format == null) {
-			throw new NoFormatFoundException("No suitable format for " + file.getFileName());
+			throw new NoFormatFoundException("No suitable format for " + file.getName());
 		}
 		return builder(file, format);
 	}
@@ -241,7 +166,7 @@
 	 * @param format the config's format
 	 * @return a new FileConfigBuilder that will build a FileConfig associated to the specified file
 	 */
-	public static FileConfigBuilder builder(Path file, ConfigFormat<?> format) {
+	public static FileConfigBuilder builder(File file, ConfigFormat<?> format) {
 		return new FileConfigBuilder(file, format);
 	}
 
