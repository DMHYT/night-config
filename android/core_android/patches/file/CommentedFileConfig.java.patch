--- core/src/main/java/com/electronwill/nightconfig/core/file/CommentedFileConfig.java
+++ android/core_android/src/main/java/com/electronwill/nightconfig/core/file/CommentedFileConfig.java
@@ -2,10 +2,9 @@
 
 import com.electronwill.nightconfig.core.CommentedConfig;
 import com.electronwill.nightconfig.core.ConfigFormat;
+import com.electronwill.nightconfig.core.io.Paths;
 
 import java.io.File;
-import java.nio.file.Path;
-import java.nio.file.Paths;
 
 /**
  * @author TheElectronWill
@@ -26,33 +25,9 @@
 	 * @throws NoFormatFoundException if the format detection fails
 	 */
 	public static CommentedFileConfig of(File file) {
-		return of(file.toPath());
-	}
-
-	/**
-	 * Creates a new FileConfig based on the specified file and format.
-	 *
-	 * @param file   the file to use to save and load the config
-	 * @param format the config's format
-	 * @return a new FileConfig associated to the specified file
-	 */
-	public static CommentedFileConfig of(File file, ConfigFormat<? extends CommentedConfig> format) {
-		return of(file.toPath(), format);
-	}
-
-	/**
-	 * Creates a new FileConfig based on the specified file and format. The format is detected
-	 * automatically.
-	 *
-	 * @param file the file to use to save and load the config
-	 * @return a new FileConfig associated to the specified file
-	 *
-	 * @throws NoFormatFoundException if the format detection fails
-	 */
-	public static CommentedFileConfig of(Path file) {
 		ConfigFormat format = FormatDetector.detect(file);
 		if (format == null || !format.supportsComments()) {
-			throw new NoFormatFoundException("No suitable format for " + file.getFileName());
+			throw new NoFormatFoundException("No suitable format for " + file.getName());
 		}
 		return of(file, format);
 	}
@@ -64,7 +39,7 @@
 	 * @param format the config's format
 	 * @return a new FileConfig associated to the specified file
 	 */
-	public static CommentedFileConfig of(Path file, ConfigFormat<? extends CommentedConfig> format) {
+	public static CommentedFileConfig of(File file, ConfigFormat<? extends CommentedConfig> format) {
 		return builder(file, format).build();
 	}
 
@@ -102,30 +77,6 @@
 	 * @throws NoFormatFoundException if the format detection fails
 	 */
 	public static CommentedFileConfig ofConcurrent(File file) {
-		return ofConcurrent(file.toPath());
-	}
-
-	/**
-	 * Creates a new trhead-safe CommentedFileConfig based on the specified file and format.
-	 *
-	 * @param file   the file to use to save and load the config
-	 * @param format the config's format
-	 * @return a new thread-safe CommentedFileConfig associated to the specified file
-	 */
-	public static CommentedFileConfig ofConcurrent(File file, ConfigFormat<? extends CommentedConfig> format) {
-		return ofConcurrent(file.toPath(), format);
-	}
-
-	/**
-	 * Creates a new thread-safe CommentedFileConfig based on the specified file and format. The
-	 * format is detected automatically.
-	 *
-	 * @param file the file to use to save and load the config
-	 * @return a new thread-safe CommentedFileConfig associated to the specified file
-	 *
-	 * @throws NoFormatFoundException if the format detection fails
-	 */
-	public static CommentedFileConfig ofConcurrent(Path file) {
 		return builder(file).concurrent().build();
 	}
 
@@ -136,7 +87,7 @@
 	 * @param format the config's format
 	 * @return a new thread-safe CommentedFileConfig associated to the specified file
 	 */
-	public static CommentedFileConfig ofConcurrent(Path file, ConfigFormat<? extends CommentedConfig> format) {
+	public static CommentedFileConfig ofConcurrent(File file, ConfigFormat<? extends CommentedConfig> format) {
 		return builder(file, format).concurrent().build();
 	}
 
@@ -173,32 +124,6 @@
 	 * specified file
 	 */
 	public static CommentedFileConfigBuilder builder(File file, ConfigFormat<? extends CommentedConfig> format) {
-		return builder(file.toPath(), format);
-	}
-
-	/**
-	 * Returns a CommentedFileConfigBuilder to create a CommentedFileConfig with many options. The
-	 * format is detected automatically.
-	 *
-	 * @param file the file to use to save and load the config
-	 * @return a new FileConfigBuilder that will build a CommentedFileConfig associated to the
-	 * specified file
-	 *
-	 * @throws NoFormatFoundException if the format detection fails
-	 */
-	public static CommentedFileConfigBuilder builder(File file) {
-		return builder(file.toPath());
-	}
-
-	/**
-	 * Returns a CommentedFileConfigBuilder to create a CommentedFileConfig with many options.
-	 *
-	 * @param file   the file to use to save and load the config
-	 * @param format the config's format
-	 * @return a new FileConfigBuilder that will build a CommentedFileConfig associated to the
-	 * specified file
-	 */
-	public static CommentedFileConfigBuilder builder(Path file, ConfigFormat<? extends CommentedConfig> format) {
 		return new CommentedFileConfigBuilder(file, format);
 	}
 
@@ -212,13 +137,13 @@
 	 *
 	 * @throws NoFormatFoundException if the format detection fails
 	 */
-	public static CommentedFileConfigBuilder builder(Path file) {
+	public static CommentedFileConfigBuilder builder(File file) {
 		ConfigFormat format = FormatDetector.detect(file);
 		if (format == null) {
-			throw new NoFormatFoundException("No suitable format for " + file.getFileName());
+			throw new NoFormatFoundException("No suitable format for " + file.getName());
 		} else if (!format.supportsComments()) {
 			throw new NoFormatFoundException(
-				"The available format doesn't support comments for " + file.getFileName());
+				"The available format doesn't support comments for " + file.getName());
 		}
 		return builder(file, format);
 	}
